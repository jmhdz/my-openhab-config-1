rule "Security State Sensor"
when
  Item Openingcontacts changed
  or
  Item Tamperswitches changed
  or
  Item Motionsensors changed
then
  Security_Last_Change.postUpdate( now.toString() )

  val OpenContacts = Openingcontacts.allMembers.filter([state == OPEN]).size
  val TamperswitchOpen = Tamperswitches.allMembers.filter([state == OPEN]).size
  val MotionsensorOpen = Motionsensors.allMembers.filter([state == ON]).size

  if ( Security_Alarmanlage.state == ON ) {
    if ( ( Security_OpenWindows.state <= OpenContacts ) || (TamperswitchOpen >= 1 ) ) { // someone opened a door or window
      logInfo("AlarmanlageRule", "Windows opened during alarm active. Security_OpenWindows: [{}], Openingcontacts: [{}], Tamperswitches: [{}]", Security_OpenWindows.state, OpenContacts, Tamperswitches.state)
//      Alarm_Security.postUpdate(ON)
      pushover("Alarm ausgeloest.")
    } else if ( Security_OpenWindows.state >= OpenContacts ) { // someone closed a door or window while the alarm is active
      logInfo("AlarmanlageRule", "Window closed. Security_OpenWindows: [{}], Openingcontacts: [{}], Tamperswitches: [{}]", Security_OpenWindows.state, OpenContacts, Tamperswitches.state)
      Security_OpenWindows.postUpdate(OpenContacts)
    }
  }
end

//----------------------------------------------------------
// Set how many Windows are open at the time of activation.
//
rule "Alarmanlage wird aktiviert"
when
  Item Security_Alarmanlage changed
then
  val OpenContacts = Openingcontacts.allMembers.filter([state == OPEN]).size
  if ( Security_Alarmanlage.state == ON) {
    logInfo("AlarmanlageRule", "Security_OpenWindows: [{}], Openingcontacts: [{}]", Security_OpenWindows.state, OpenContacts)
    Security_OpenWindows.postUpdate(OpenContacts)
  } else {
    Security_OpenWindows.postUpdate(0)
  }
end

//----------------------------------------------------------
// Check all open doors and windows and let me know
//
rule "SecurityCheck vorm Weggehen"
when
        Item Barbara_Remote_Abwesend changed to ON or
        Item Hannes_Remote_Abwesend changed to ON
then
        var String message = "SecCheck:"
        if (! Openingcontacts.allMembers.filter([state == OPEN]).empty) {
          val report = Openingcontacts.allMembers.filter([state == OPEN]).map[
            name + ": " + state.format("%s")
          ].join("\n")
          message =  message + " Offene Fenster:\n" + report
        } else {
          message = message + " Alles ok."
        }
        logInfo("SecurityCheckRule", "Message: [{}]", message)
        push_message_text.postUpdate(message)
end

//----------------------------------------------------------
// Activate alarm if everyone is away
//
//rule "Alarmanlage"
//when
//  Item JemandDa changed
//then
//        if( JemandDa.state == OFF ) {
//          logInfo("AlarmanlageRule", "Aktiviere Alarmanlage.")
//
//          var String message = "Alle weg. Aktiviere Alarmanlage."
//          if (! Openingcontacts.allMembers.filter([state == OPEN]).empty) {
//            val report = Openingcontacts.allMembers.filter([state == OPEN]).map[
//              name + ": " + state.format("%s")
//            ].join("\n")
//            message =  message + " Offene Fenster:\n" + report
//          }
//          logInfo("AlarmanlageRule", "Message: [{}]", message)
//          push_message_text.postUpdate(message)
//
//        } else {
//          logInfo("AlarmanlageRule", "Deaktiviere Alarmanlage.")
//          push_message_text.postUpdate("Deaktiviere Alarmanlage.")
//        }
//end
